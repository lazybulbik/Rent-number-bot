from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre, link
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions, InputFile, InputMedia
from aiogram.utils.helper import Helper, HelperMode, ListItem

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

import config
import db
import menu
import sms
import text

bot = Bot(config.BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

rent_list = {}


class Forms(Helper):
    mode = HelperMode.snake_case
    FIND_SERVICE = ListItem()


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
    db.create_user(message)

    if message.text != '/start':
        referal_id = message.text.replace('/start ', '')

        if str(referal_id) != str(message.from_user.id):
            await bot.send_message(message.text.replace('/start ', ''), '–í–∏–∂—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –¥—Ä—É–≥–∞!')
            db.update_data({'friends': db.get_data(referal_id)[0][2] + 1}, id=referal_id)

            if db.get_data(referal_id)[0][2] % 5 == 0:
                db.update_data({'activates': db.get_data(referal_id)[0][1] + 1}, referal_id)
                await bot.send_message(referal_id, '–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 5 –¥—Ä—É–∑–µ–π, –∫–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –í–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é')

    await message.answer('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!', reply_markup=menu.check_menu)


@dp.message_handler(lambda message: not (message.entities), state=Forms.FIND_SERVICE[0])
async def find_services(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    check = sms.get_similar_service(message.text)

    if len(check) != 0:
        await message.answer('–í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–æ—Å—å –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:',
                             reply_markup=menu.get_find_srvices_menu(message.text))
        await state.reset_state()
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')


@dp.callback_query_handler(state='*')
async def call_back(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)

    if callback_query.data == menu.back_button.callback_data:
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text=text.main_menu,
                                    reply_markup=menu.main_menu)

        try:
            del rent_list[callback_query.from_user.id]
        except:
            pass

    elif callback_query.data == menu.back_to_services_button.callback_data:
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å',
                                    reply_markup=menu.get_services_menu())
        await state.reset_state()

    elif callback_query.data == menu.check_button.callback_data:
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text=text.main_menu,
                                    reply_markup=menu.main_menu)

    elif callback_query.data == menu.free_activation.callback_data:
        rent_list[callback_query.from_user.id] = {}
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É",
                                    reply_markup=menu.get_contries_menu())

    elif 'country' in callback_query.data:
        rent_list[callback_query.from_user.id]['country'] = callback_query.data.split(':')[1]
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞',
                                    reply_markup=menu.get_operators_menu(
                                        rent_list[callback_query.from_user.id]['country']))

    elif 'operator' in callback_query.data:
        rent_list[callback_query.from_user.id]['operator'] = callback_query.data.split(':')[1]
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å",
                                    reply_markup=menu.get_services_menu())

    elif 'service' in callback_query.data:
        if callback_query.data == 'service:find_service':
            await state.set_state(Forms.FIND_SERVICE[0])
            await bot.edit_message_text(message_id=callback_query.message.message_id,
                                        chat_id=callback_query.from_user.id,
                                        text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π',
                                        reply_markup=menu.back_to_services_menu)
            return

        rent_list[callback_query.from_user.id]['service'] = callback_query.data.split(':')[1]
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text="–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ –∞—Ä–µ–Ω–¥–µ!",
                                    reply_markup=menu.buy_menu)

    elif callback_query.data == menu.buy_button.callback_data:
        print(rent_list[callback_query.from_user.id])

        activate = sms.rent_number(rent_list[callback_query.from_user.id])

        if activate['status'] == 'success':
            await bot.edit_message_text(message_id=callback_query.message.message_id,
                                        chat_id=callback_query.from_user.id,
                                        text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞ \n{activate["phone"]["number"]}',
                                        reply_markup=menu.get_check_sms_menu(activate['phone']['id']))

            del rent_list[callback_query.from_user.id]
        else:
            await bot.edit_message_text(message_id=callback_query.message.message_id,
                                        chat_id=callback_query.from_user.id,
                                        text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞üòû. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É',
                                        reply_markup=menu.get_contries_menu())

    elif 'check_sms' in callback_query.data:
        id = callback_query.data.split(':')[1]

        status = sms.get_sms(id)
        if 'STATUS_WAIT_CODE' in status:
            await bot.send_message(callback_query.from_user.id, '–û–∂–∏–¥–∞–Ω–∏–µ —Å–º—Å')

        elif 'STATUS_OK' in status:
            await bot.send_message(callback_query.from_user.id, status)

        elif 'STATUS_CANCEL' in status:
            await bot.send_message(callback_query.from_user.id, '–ê—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.')

        else:
            await bot.send_message(callback_query.from_user.id, '–û–∂–∏–¥–∞–Ω–∏–µ')

    elif callback_query.data == menu.rules.callback_data:
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text=text.rules,
                                    reply_markup=menu.back_menu)

    elif callback_query.data == menu.profile.callback_data:
        user = db.get_data(callback_query.from_user.id)[0]
        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text=f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \nid: {user[0]}\n–ö–æ–ª-–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {user[1]} \n–ö–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: {user[2]}',
                                    reply_markup=menu.back_menu)

    elif callback_query.data == menu.referal.callback_data:
        text_referal = '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ª—é–¥–µ–π –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ' \
               f'\n –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞: https://t.me/FreeActivateBot?start={callback_query.from_user.id}'

        await bot.edit_message_text(message_id=callback_query.message.message_id,
                                    chat_id=callback_query.from_user.id,
                                    text=text_referal,
                                    reply_markup=menu.back_menu)

executor.start_polling(dp)
